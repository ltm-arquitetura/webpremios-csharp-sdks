/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RequestAddCartItem :  IEquatable<RequestAddCartItem>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestAddCartItem" /> class.
        /// </summary>
        /// <param name="VendorId">Identificador do parceiro (required).</param>
        /// <param name="ProductSkuId">Identificador do SKU (required).</param>
        public RequestAddCartItem(string VendorId = default(string), string ProductSkuId = default(string))
        {
            // to ensure "VendorId" is required (not null)
            if (VendorId == null)
            {
                throw new InvalidDataException("VendorId is a required property for RequestAddCartItem and cannot be null");
            }
            else
            {
                this.VendorId = VendorId;
            }
            // to ensure "ProductSkuId" is required (not null)
            if (ProductSkuId == null)
            {
                throw new InvalidDataException("ProductSkuId is a required property for RequestAddCartItem and cannot be null");
            }
            else
            {
                this.ProductSkuId = ProductSkuId;
            }
            
        }

        /// <summary>
        /// Identificador do parceiro
        /// </summary>
        /// <value>Identificador do parceiro</value>
        [DataMember(Name="vendorId")]
        public string VendorId { get; set; }
        /// <summary>
        /// Identificador do SKU
        /// </summary>
        /// <value>Identificador do SKU</value>
        [DataMember(Name="productSkuId")]
        public string ProductSkuId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestAddCartItem {\n");
            sb.Append("  VendorId: ").Append(VendorId).Append("\n");
            sb.Append("  ProductSkuId: ").Append(ProductSkuId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((RequestAddCartItem)obj);
        }

        /// <summary>
        /// Returns true if RequestAddCartItem instances are equal
        /// </summary>
        /// <param name="other">Instance of RequestAddCartItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestAddCartItem other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.VendorId == other.VendorId ||
                    this.VendorId != null &&
                    this.VendorId.Equals(other.VendorId)
                ) && 
                (
                    this.ProductSkuId == other.ProductSkuId ||
                    this.ProductSkuId != null &&
                    this.ProductSkuId.Equals(other.ProductSkuId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.VendorId != null)
                    hash = hash * 59 + this.VendorId.GetHashCode();
                    if (this.ProductSkuId != null)
                    hash = hash * 59 + this.ProductSkuId.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(RequestAddCartItem left, RequestAddCartItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RequestAddCartItem left, RequestAddCartItem right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
