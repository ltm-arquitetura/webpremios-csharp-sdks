/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Cart :  IEquatable<Cart>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Cart" /> class.
        /// </summary>
        /// <param name="Price">Total do carrinho em pontos.</param>
        /// <param name="Items">Items.</param>
        /// <param name="Customer">Customer.</param>
        /// <param name="Shipping">Shipping.</param>
        public Cart(decimal? Price = default(decimal?), List<CartItem> Items = default(List<CartItem>), CartShippingCustomer Customer = default(CartShippingCustomer), Address Shipping = default(Address))
        {
            this.Price = Price;
            this.Items = Items;
            this.Customer = Customer;
            this.Shipping = Shipping;
            
        }

        /// <summary>
        /// Total do carrinho em pontos
        /// </summary>
        /// <value>Total do carrinho em pontos</value>
        [DataMember(Name="price")]
        public decimal? Price { get; set; }
        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items")]
        public List<CartItem> Items { get; set; }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer")]
        public CartShippingCustomer Customer { get; set; }
        /// <summary>
        /// Gets or Sets Shipping
        /// </summary>
        [DataMember(Name="shipping")]
        public Address Shipping { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cart {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Cart)obj);
        }

        /// <summary>
        /// Returns true if Cart instances are equal
        /// </summary>
        /// <param name="other">Instance of Cart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cart other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(other.Items)
                ) && 
                (
                    this.Customer == other.Customer ||
                    this.Customer != null &&
                    this.Customer.Equals(other.Customer)
                ) && 
                (
                    this.Shipping == other.Shipping ||
                    this.Shipping != null &&
                    this.Shipping.Equals(other.Shipping)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                    if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                    if (this.Customer != null)
                    hash = hash * 59 + this.Customer.GetHashCode();
                    if (this.Shipping != null)
                    hash = hash * 59 + this.Shipping.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Cart left, Cart right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Cart left, Cart right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
