/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AddressReq :  IEquatable<AddressReq>
    {
                /// <summary>
        /// Estado
        /// </summary>
        /// <value>Estado</value>
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum ACEnum for "AC"
            /// </summary>
            [EnumMember(Value = "AC")]
            ACEnum,
            
            /// <summary>
            /// Enum ALEnum for "AL"
            /// </summary>
            [EnumMember(Value = "AL")]
            ALEnum,
            
            /// <summary>
            /// Enum APEnum for "AP"
            /// </summary>
            [EnumMember(Value = "AP")]
            APEnum,
            
            /// <summary>
            /// Enum AMEnum for "AM"
            /// </summary>
            [EnumMember(Value = "AM")]
            AMEnum,
            
            /// <summary>
            /// Enum BAEnum for "BA"
            /// </summary>
            [EnumMember(Value = "BA")]
            BAEnum,
            
            /// <summary>
            /// Enum CEEnum for "CE"
            /// </summary>
            [EnumMember(Value = "CE")]
            CEEnum,
            
            /// <summary>
            /// Enum DFEnum for "DF"
            /// </summary>
            [EnumMember(Value = "DF")]
            DFEnum,
            
            /// <summary>
            /// Enum ESEnum for "ES"
            /// </summary>
            [EnumMember(Value = "ES")]
            ESEnum,
            
            /// <summary>
            /// Enum GOEnum for "GO"
            /// </summary>
            [EnumMember(Value = "GO")]
            GOEnum,
            
            /// <summary>
            /// Enum MAEnum for "MA"
            /// </summary>
            [EnumMember(Value = "MA")]
            MAEnum,
            
            /// <summary>
            /// Enum MTEnum for "MT"
            /// </summary>
            [EnumMember(Value = "MT")]
            MTEnum,
            
            /// <summary>
            /// Enum MSEnum for "MS"
            /// </summary>
            [EnumMember(Value = "MS")]
            MSEnum,
            
            /// <summary>
            /// Enum MGEnum for "MG"
            /// </summary>
            [EnumMember(Value = "MG")]
            MGEnum,
            
            /// <summary>
            /// Enum PAEnum for "PA"
            /// </summary>
            [EnumMember(Value = "PA")]
            PAEnum,
            
            /// <summary>
            /// Enum PBEnum for "PB"
            /// </summary>
            [EnumMember(Value = "PB")]
            PBEnum,
            
            /// <summary>
            /// Enum PREnum for "PR"
            /// </summary>
            [EnumMember(Value = "PR")]
            PREnum,
            
            /// <summary>
            /// Enum PEEnum for "PE"
            /// </summary>
            [EnumMember(Value = "PE")]
            PEEnum,
            
            /// <summary>
            /// Enum PIEnum for "PI"
            /// </summary>
            [EnumMember(Value = "PI")]
            PIEnum,
            
            /// <summary>
            /// Enum RJEnum for "RJ"
            /// </summary>
            [EnumMember(Value = "RJ")]
            RJEnum,
            
            /// <summary>
            /// Enum RNEnum for "RN"
            /// </summary>
            [EnumMember(Value = "RN")]
            RNEnum,
            
            /// <summary>
            /// Enum RSEnum for "RS"
            /// </summary>
            [EnumMember(Value = "RS")]
            RSEnum,
            
            /// <summary>
            /// Enum ROEnum for "RO"
            /// </summary>
            [EnumMember(Value = "RO")]
            ROEnum,
            
            /// <summary>
            /// Enum RREnum for "RR"
            /// </summary>
            [EnumMember(Value = "RR")]
            RREnum,
            
            /// <summary>
            /// Enum SCEnum for "SC"
            /// </summary>
            [EnumMember(Value = "SC")]
            SCEnum,
            
            /// <summary>
            /// Enum SPEnum for "SP"
            /// </summary>
            [EnumMember(Value = "SP")]
            SPEnum,
            
            /// <summary>
            /// Enum SEEnum for "SE"
            /// </summary>
            [EnumMember(Value = "SE")]
            SEEnum,
            
            /// <summary>
            /// Enum TOEnum for "TO"
            /// </summary>
            [EnumMember(Value = "TO")]
            TOEnum
        }
        /// <summary>
        /// Estado
        /// </summary>
        /// <value>Estado</value>
        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressReq" /> class.
        /// </summary>
        /// <param name="Street">Logradouro.</param>
        /// <param name="Number">Número.</param>
        /// <param name="Complement">Complemento.</param>
        /// <param name="District">Bairro.</param>
        /// <param name="City">Cidade.</param>
        /// <param name="State">Estado.</param>
        /// <param name="ZipCode">CEP.</param>
        public AddressReq(string Street = default(string), string Number = default(string), string Complement = default(string), string District = default(string), string City = default(string), StateEnum? State = default(StateEnum?), string ZipCode = default(string))
        {
            this.Street = Street;
            this.Number = Number;
            this.Complement = Complement;
            this.District = District;
            this.City = City;
            this.State = State;
            this.ZipCode = ZipCode;
            
        }

        /// <summary>
        /// Logradouro
        /// </summary>
        /// <value>Logradouro</value>
        [DataMember(Name="street")]
        public string Street { get; set; }
        /// <summary>
        /// Número
        /// </summary>
        /// <value>Número</value>
        [DataMember(Name="number")]
        public string Number { get; set; }
        /// <summary>
        /// Complemento
        /// </summary>
        /// <value>Complemento</value>
        [DataMember(Name="complement")]
        public string Complement { get; set; }
        /// <summary>
        /// Bairro
        /// </summary>
        /// <value>Bairro</value>
        [DataMember(Name="district")]
        public string District { get; set; }
        /// <summary>
        /// Cidade
        /// </summary>
        /// <value>Cidade</value>
        [DataMember(Name="city")]
        public string City { get; set; }
        /// <summary>
        /// CEP
        /// </summary>
        /// <value>CEP</value>
        [DataMember(Name="zipCode")]
        public string ZipCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressReq {\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Complement: ").Append(Complement).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((AddressReq)obj);
        }

        /// <summary>
        /// Returns true if AddressReq instances are equal
        /// </summary>
        /// <param name="other">Instance of AddressReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressReq other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Street == other.Street ||
                    this.Street != null &&
                    this.Street.Equals(other.Street)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.Complement == other.Complement ||
                    this.Complement != null &&
                    this.Complement.Equals(other.Complement)
                ) && 
                (
                    this.District == other.District ||
                    this.District != null &&
                    this.District.Equals(other.District)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.ZipCode == other.ZipCode ||
                    this.ZipCode != null &&
                    this.ZipCode.Equals(other.ZipCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Street != null)
                    hash = hash * 59 + this.Street.GetHashCode();
                    if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                    if (this.Complement != null)
                    hash = hash * 59 + this.Complement.GetHashCode();
                    if (this.District != null)
                    hash = hash * 59 + this.District.GetHashCode();
                    if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                    if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                    if (this.ZipCode != null)
                    hash = hash * 59 + this.ZipCode.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(AddressReq left, AddressReq right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AddressReq left, AddressReq right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
