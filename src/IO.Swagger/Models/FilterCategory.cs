/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FilterCategory :  IEquatable<FilterCategory>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="FilterCategory" /> class.
        /// </summary>
        /// <param name="Id">Identificador da categoria.</param>
        /// <param name="Name">Nome da categoria.</param>
        /// <param name="Slug">URL amigável da categoria.</param>
        /// <param name="Quantity">Quantidade de registros.</param>
        /// <param name="Subcategories">Subcategories.</param>
        public FilterCategory(string Id = default(string), string Name = default(string), string Slug = default(string), int? Quantity = default(int?), List<Subcategory> Subcategories = default(List<Subcategory>))
        {
            this.Id = Id;
            this.Name = Name;
            this.Slug = Slug;
            this.Quantity = Quantity;
            this.Subcategories = Subcategories;
            
        }

        /// <summary>
        /// Identificador da categoria
        /// </summary>
        /// <value>Identificador da categoria</value>
        [DataMember(Name="id")]
        public string Id { get; set; }
        /// <summary>
        /// Nome da categoria
        /// </summary>
        /// <value>Nome da categoria</value>
        [DataMember(Name="name")]
        public string Name { get; set; }
        /// <summary>
        /// URL amigável da categoria
        /// </summary>
        /// <value>URL amigável da categoria</value>
        [DataMember(Name="slug")]
        public string Slug { get; set; }
        /// <summary>
        /// Quantidade de registros
        /// </summary>
        /// <value>Quantidade de registros</value>
        [DataMember(Name="quantity")]
        public int? Quantity { get; set; }
        /// <summary>
        /// Gets or Sets Subcategories
        /// </summary>
        [DataMember(Name="subcategories")]
        public List<Subcategory> Subcategories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterCategory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Subcategories: ").Append(Subcategories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((FilterCategory)obj);
        }

        /// <summary>
        /// Returns true if FilterCategory instances are equal
        /// </summary>
        /// <param name="other">Instance of FilterCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterCategory other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Slug == other.Slug ||
                    this.Slug != null &&
                    this.Slug.Equals(other.Slug)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Subcategories == other.Subcategories ||
                    this.Subcategories != null &&
                    this.Subcategories.SequenceEqual(other.Subcategories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.Slug != null)
                    hash = hash * 59 + this.Slug.GetHashCode();
                    if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                    if (this.Subcategories != null)
                    hash = hash * 59 + this.Subcategories.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(FilterCategory left, FilterCategory right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FilterCategory left, FilterCategory right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
