/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreditCardPayment :  IEquatable<CreditCardPayment>
    {
                /// <summary>
        /// Bandeira do cartão
        /// </summary>
        /// <value>Bandeira do cartão</value>
        public enum BrandEnum
        {
            
            /// <summary>
            /// Enum VISAEnum for "VISA"
            /// </summary>
            [EnumMember(Value = "VISA")]
            VISAEnum,
            
            /// <summary>
            /// Enum MASTERCARDEnum for "MASTERCARD"
            /// </summary>
            [EnumMember(Value = "MASTERCARD")]
            MASTERCARDEnum,
            
            /// <summary>
            /// Enum AMERICANEXPRESSEnum for "AMERICANEXPRESS"
            /// </summary>
            [EnumMember(Value = "AMERICANEXPRESS")]
            AMERICANEXPRESSEnum,
            
            /// <summary>
            /// Enum DINERSEnum for "DINERS"
            /// </summary>
            [EnumMember(Value = "DINERS")]
            DINERSEnum,
            
            /// <summary>
            /// Enum ELOEnum for "ELO"
            /// </summary>
            [EnumMember(Value = "ELO")]
            ELOEnum
        }
        /// <summary>
        /// Bandeira do cartão
        /// </summary>
        /// <value>Bandeira do cartão</value>
        [DataMember(Name="brand")]
        public BrandEnum? Brand { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardPayment" /> class.
        /// </summary>
        /// <param name="Brand">Bandeira do cartão.</param>
        /// <param name="Name">Nome escrito no cartão.</param>
        /// <param name="Number">Número do cartão.</param>
        /// <param name="ExpirationMonth">Mês de expiração.</param>
        /// <param name="ExpirationYear">Ano de expiração, somente 2 últimos números.</param>
        /// <param name="SecurityCode">Código de seguraça do cartão.</param>
        /// <param name="Portions">Número de parcelas.</param>
        /// <param name="ValuePoints">Valor em pontos a serem comprados.</param>
        public CreditCardPayment(BrandEnum? Brand = default(BrandEnum?), string Name = default(string), string Number = default(string), string ExpirationMonth = default(string), string ExpirationYear = default(string), string SecurityCode = default(string), decimal? Portions = default(decimal?), decimal? ValuePoints = default(decimal?))
        {
            this.Brand = Brand;
            this.Name = Name;
            this.Number = Number;
            this.ExpirationMonth = ExpirationMonth;
            this.ExpirationYear = ExpirationYear;
            this.SecurityCode = SecurityCode;
            this.Portions = Portions;
            this.ValuePoints = ValuePoints;
            
        }

        /// <summary>
        /// Nome escrito no cartão
        /// </summary>
        /// <value>Nome escrito no cartão</value>
        [DataMember(Name="name")]
        public string Name { get; set; }
        /// <summary>
        /// Número do cartão
        /// </summary>
        /// <value>Número do cartão</value>
        [DataMember(Name="number")]
        public string Number { get; set; }
        /// <summary>
        /// Mês de expiração
        /// </summary>
        /// <value>Mês de expiração</value>
        [DataMember(Name="expirationMonth")]
        public string ExpirationMonth { get; set; }
        /// <summary>
        /// Ano de expiração, somente 2 últimos números
        /// </summary>
        /// <value>Ano de expiração, somente 2 últimos números</value>
        [DataMember(Name="expirationYear")]
        public string ExpirationYear { get; set; }
        /// <summary>
        /// Código de seguraça do cartão
        /// </summary>
        /// <value>Código de seguraça do cartão</value>
        [DataMember(Name="securityCode")]
        public string SecurityCode { get; set; }
        /// <summary>
        /// Número de parcelas
        /// </summary>
        /// <value>Número de parcelas</value>
        [DataMember(Name="portions")]
        public decimal? Portions { get; set; }
        /// <summary>
        /// Valor em pontos a serem comprados
        /// </summary>
        /// <value>Valor em pontos a serem comprados</value>
        [DataMember(Name="valuePoints")]
        public decimal? ValuePoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCardPayment {\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            sb.Append("  ExpirationYear: ").Append(ExpirationYear).Append("\n");
            sb.Append("  SecurityCode: ").Append(SecurityCode).Append("\n");
            sb.Append("  Portions: ").Append(Portions).Append("\n");
            sb.Append("  ValuePoints: ").Append(ValuePoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CreditCardPayment)obj);
        }

        /// <summary>
        /// Returns true if CreditCardPayment instances are equal
        /// </summary>
        /// <param name="other">Instance of CreditCardPayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardPayment other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Brand == other.Brand ||
                    this.Brand != null &&
                    this.Brand.Equals(other.Brand)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.ExpirationMonth == other.ExpirationMonth ||
                    this.ExpirationMonth != null &&
                    this.ExpirationMonth.Equals(other.ExpirationMonth)
                ) && 
                (
                    this.ExpirationYear == other.ExpirationYear ||
                    this.ExpirationYear != null &&
                    this.ExpirationYear.Equals(other.ExpirationYear)
                ) && 
                (
                    this.SecurityCode == other.SecurityCode ||
                    this.SecurityCode != null &&
                    this.SecurityCode.Equals(other.SecurityCode)
                ) && 
                (
                    this.Portions == other.Portions ||
                    this.Portions != null &&
                    this.Portions.Equals(other.Portions)
                ) && 
                (
                    this.ValuePoints == other.ValuePoints ||
                    this.ValuePoints != null &&
                    this.ValuePoints.Equals(other.ValuePoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Brand != null)
                    hash = hash * 59 + this.Brand.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                    if (this.ExpirationMonth != null)
                    hash = hash * 59 + this.ExpirationMonth.GetHashCode();
                    if (this.ExpirationYear != null)
                    hash = hash * 59 + this.ExpirationYear.GetHashCode();
                    if (this.SecurityCode != null)
                    hash = hash * 59 + this.SecurityCode.GetHashCode();
                    if (this.Portions != null)
                    hash = hash * 59 + this.Portions.GetHashCode();
                    if (this.ValuePoints != null)
                    hash = hash * 59 + this.ValuePoints.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CreditCardPayment left, CreditCardPayment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreditCardPayment left, CreditCardPayment right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
