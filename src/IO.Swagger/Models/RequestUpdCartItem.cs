/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RequestUpdCartItem :  IEquatable<RequestUpdCartItem>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestUpdCartItem" /> class.
        /// </summary>
        /// <param name="Quantity">Quantidade. (required).</param>
        public RequestUpdCartItem(int? Quantity = default(int?))
        {
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
            {
                throw new InvalidDataException("Quantity is a required property for RequestUpdCartItem and cannot be null");
            }
            else
            {
                this.Quantity = Quantity;
            }
            
        }

        /// <summary>
        /// Quantidade.
        /// </summary>
        /// <value>Quantidade.</value>
        [DataMember(Name="quantity")]
        public int? Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestUpdCartItem {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((RequestUpdCartItem)obj);
        }

        /// <summary>
        /// Returns true if RequestUpdCartItem instances are equal
        /// </summary>
        /// <param name="other">Instance of RequestUpdCartItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestUpdCartItem other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(RequestUpdCartItem left, RequestUpdCartItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RequestUpdCartItem left, RequestUpdCartItem right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
