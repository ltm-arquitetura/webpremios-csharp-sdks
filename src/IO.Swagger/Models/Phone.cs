/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Phone :  IEquatable<Phone>
    {
                /// <summary>
        /// Tipo
        /// </summary>
        /// <value>Tipo</value>
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum HOMEEnum for "HOME"
            /// </summary>
            [EnumMember(Value = "HOME")]
            HOMEEnum,
            
            /// <summary>
            /// Enum COMMERCIALEnum for "COMMERCIAL"
            /// </summary>
            [EnumMember(Value = "COMMERCIAL")]
            COMMERCIALEnum,
            
            /// <summary>
            /// Enum CELLULAREnum for "CELLULAR"
            /// </summary>
            [EnumMember(Value = "CELLULAR")]
            CELLULAREnum
        }
        /// <summary>
        /// Tipo
        /// </summary>
        /// <value>Tipo</value>
        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Phone" /> class.
        /// </summary>
        /// <param name="AreaCode">DDD.</param>
        /// <param name="Number">Número.</param>
        /// <param name="Type">Tipo.</param>
        public Phone(string AreaCode = default(string), string Number = default(string), TypeEnum? Type = default(TypeEnum?))
        {
            this.AreaCode = AreaCode;
            this.Number = Number;
            this.Type = Type;
            
        }

        /// <summary>
        /// DDD
        /// </summary>
        /// <value>DDD</value>
        [DataMember(Name="areaCode")]
        public string AreaCode { get; set; }
        /// <summary>
        /// Número
        /// </summary>
        /// <value>Número</value>
        [DataMember(Name="number")]
        public string Number { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Phone {\n");
            sb.Append("  AreaCode: ").Append(AreaCode).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Phone)obj);
        }

        /// <summary>
        /// Returns true if Phone instances are equal
        /// </summary>
        /// <param name="other">Instance of Phone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Phone other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.AreaCode == other.AreaCode ||
                    this.AreaCode != null &&
                    this.AreaCode.Equals(other.AreaCode)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.AreaCode != null)
                    hash = hash * 59 + this.AreaCode.GetHashCode();
                    if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                    if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Phone left, Phone right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Phone left, Phone right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
