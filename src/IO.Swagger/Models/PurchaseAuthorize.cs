/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PurchaseAuthorize :  IEquatable<PurchaseAuthorize>
    {
                /// <summary>
        /// Canal pelo qual o pedido está sendo fechado
        /// </summary>
        /// <value>Canal pelo qual o pedido está sendo fechado</value>
        public enum ChannelTypeEnum
        {
            
            /// <summary>
            /// Enum ONLINEEnum for "ONLINE"
            /// </summary>
            [EnumMember(Value = "ONLINE")]
            ONLINEEnum,
            
            /// <summary>
            /// Enum POSEnum for "POS"
            /// </summary>
            [EnumMember(Value = "POS")]
            POSEnum,
            
            /// <summary>
            /// Enum CALLCENTEREnum for "CALLCENTER"
            /// </summary>
            [EnumMember(Value = "CALLCENTER")]
            CALLCENTEREnum,
            
            /// <summary>
            /// Enum STOREAUTHORIZEEnum for "STOREAUTHORIZE"
            /// </summary>
            [EnumMember(Value = "STOREAUTHORIZE")]
            STOREAUTHORIZEEnum,
            
            /// <summary>
            /// Enum STOREONLINEEnum for "STOREONLINE"
            /// </summary>
            [EnumMember(Value = "STOREONLINE")]
            STOREONLINEEnum,
            
            /// <summary>
            /// Enum MOBILEEnum for "MOBILE"
            /// </summary>
            [EnumMember(Value = "MOBILE")]
            MOBILEEnum,
            
            /// <summary>
            /// Enum STOREOWNEnum for "STOREOWN"
            /// </summary>
            [EnumMember(Value = "STOREOWN")]
            STOREOWNEnum,
            
            /// <summary>
            /// Enum RESALEEnum for "RESALE"
            /// </summary>
            [EnumMember(Value = "RESALE")]
            RESALEEnum,
            
            /// <summary>
            /// Enum SELFSERVICEEnum for "SELFSERVICE"
            /// </summary>
            [EnumMember(Value = "SELFSERVICE")]
            SELFSERVICEEnum,
            
            /// <summary>
            /// Enum SMSINTERACTIVEEnum for "SMSINTERACTIVE"
            /// </summary>
            [EnumMember(Value = "SMSINTERACTIVE")]
            SMSINTERACTIVEEnum,
            
            /// <summary>
            /// Enum TELESALESEnum for "TELESALES"
            /// </summary>
            [EnumMember(Value = "TELESALES")]
            TELESALESEnum,
            
            /// <summary>
            /// Enum URAEnum for "URA"
            /// </summary>
            [EnumMember(Value = "URA")]
            URAEnum,
            
            /// <summary>
            /// Enum STOREBENEFITEnum for "STOREBENEFIT"
            /// </summary>
            [EnumMember(Value = "STOREBENEFIT")]
            STOREBENEFITEnum,
            
            /// <summary>
            /// Enum NETBANKINGEnum for "NETBANKING"
            /// </summary>
            [EnumMember(Value = "NETBANKING")]
            NETBANKINGEnum,
            
            /// <summary>
            /// Enum OFFLINEEnum for "OFFLINE"
            /// </summary>
            [EnumMember(Value = "OFFLINE")]
            OFFLINEEnum
        }
        /// <summary>
        /// Canal pelo qual o pedido está sendo fechado
        /// </summary>
        /// <value>Canal pelo qual o pedido está sendo fechado</value>
        [DataMember(Name="channelType")]
        public ChannelTypeEnum? ChannelType { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseAuthorize" /> class.
        /// </summary>
        /// <param name="ChannelType">Canal pelo qual o pedido está sendo fechado.</param>
        /// <param name="VendorOrderId">Identificador do pedido no parceiro..</param>
        /// <param name="Customer">Customer.</param>
        /// <param name="Shipping">Shipping.</param>
        /// <param name="Items">.</param>
        public PurchaseAuthorize(ChannelTypeEnum? ChannelType = default(ChannelTypeEnum?), string VendorOrderId = default(string), PurchaseAuthCustomer Customer = default(PurchaseAuthCustomer), Address Shipping = default(Address), List<PurchaseAuthItems> Items = default(List<PurchaseAuthItems>))
        {
            this.ChannelType = ChannelType;
            this.VendorOrderId = VendorOrderId;
            this.Customer = Customer;
            this.Shipping = Shipping;
            this.Items = Items;
            
        }

        /// <summary>
        /// Identificador do pedido no parceiro.
        /// </summary>
        /// <value>Identificador do pedido no parceiro.</value>
        [DataMember(Name="vendorOrderId")]
        public string VendorOrderId { get; set; }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer")]
        public PurchaseAuthCustomer Customer { get; set; }
        /// <summary>
        /// Gets or Sets Shipping
        /// </summary>
        [DataMember(Name="shipping")]
        public Address Shipping { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="items")]
        public List<PurchaseAuthItems> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseAuthorize {\n");
            sb.Append("  ChannelType: ").Append(ChannelType).Append("\n");
            sb.Append("  VendorOrderId: ").Append(VendorOrderId).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((PurchaseAuthorize)obj);
        }

        /// <summary>
        /// Returns true if PurchaseAuthorize instances are equal
        /// </summary>
        /// <param name="other">Instance of PurchaseAuthorize to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseAuthorize other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ChannelType == other.ChannelType ||
                    this.ChannelType != null &&
                    this.ChannelType.Equals(other.ChannelType)
                ) && 
                (
                    this.VendorOrderId == other.VendorOrderId ||
                    this.VendorOrderId != null &&
                    this.VendorOrderId.Equals(other.VendorOrderId)
                ) && 
                (
                    this.Customer == other.Customer ||
                    this.Customer != null &&
                    this.Customer.Equals(other.Customer)
                ) && 
                (
                    this.Shipping == other.Shipping ||
                    this.Shipping != null &&
                    this.Shipping.Equals(other.Shipping)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(other.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ChannelType != null)
                    hash = hash * 59 + this.ChannelType.GetHashCode();
                    if (this.VendorOrderId != null)
                    hash = hash * 59 + this.VendorOrderId.GetHashCode();
                    if (this.Customer != null)
                    hash = hash * 59 + this.Customer.GetHashCode();
                    if (this.Shipping != null)
                    hash = hash * 59 + this.Shipping.GetHashCode();
                    if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(PurchaseAuthorize left, PurchaseAuthorize right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PurchaseAuthorize left, PurchaseAuthorize right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
