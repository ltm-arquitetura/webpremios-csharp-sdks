/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProductSKUDetail :  IEquatable<ProductSKUDetail>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductSKUDetail" /> class.
        /// </summary>
        /// <param name="Id">Identificador do SKU.</param>
        /// <param name="OriginalId">Identificador do SKU no parceiro.</param>
        /// <param name="Status">Status do produto.</param>
        /// <param name="Ean">EAN.</param>
        /// <param name="Images">Imagens.</param>
        /// <param name="Features">Características.</param>
        public ProductSKUDetail(string Id = default(string), string OriginalId = default(string), string Status = default(string), string Ean = default(string), List<SKUImages> Images = default(List<SKUImages>), List<Features> Features = default(List<Features>))
        {
            this.Id = Id;
            this.OriginalId = OriginalId;
            this.Status = Status;
            this.Ean = Ean;
            this.Images = Images;
            this.Features = Features;
            
        }

        /// <summary>
        /// Identificador do SKU
        /// </summary>
        /// <value>Identificador do SKU</value>
        [DataMember(Name="id")]
        public string Id { get; set; }
        /// <summary>
        /// Identificador do SKU no parceiro
        /// </summary>
        /// <value>Identificador do SKU no parceiro</value>
        [DataMember(Name="originalId")]
        public string OriginalId { get; set; }
        /// <summary>
        /// Status do produto
        /// </summary>
        /// <value>Status do produto</value>
        [DataMember(Name="status")]
        public string Status { get; set; }
        /// <summary>
        /// EAN
        /// </summary>
        /// <value>EAN</value>
        [DataMember(Name="ean")]
        public string Ean { get; set; }
        /// <summary>
        /// Imagens
        /// </summary>
        /// <value>Imagens</value>
        [DataMember(Name="images")]
        public List<SKUImages> Images { get; set; }
        /// <summary>
        /// Características
        /// </summary>
        /// <value>Características</value>
        [DataMember(Name="features")]
        public List<Features> Features { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductSKUDetail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OriginalId: ").Append(OriginalId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Ean: ").Append(Ean).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((ProductSKUDetail)obj);
        }

        /// <summary>
        /// Returns true if ProductSKUDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductSKUDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductSKUDetail other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.OriginalId == other.OriginalId ||
                    this.OriginalId != null &&
                    this.OriginalId.Equals(other.OriginalId)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Ean == other.Ean ||
                    this.Ean != null &&
                    this.Ean.Equals(other.Ean)
                ) && 
                (
                    this.Images == other.Images ||
                    this.Images != null &&
                    this.Images.SequenceEqual(other.Images)
                ) && 
                (
                    this.Features == other.Features ||
                    this.Features != null &&
                    this.Features.SequenceEqual(other.Features)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.OriginalId != null)
                    hash = hash * 59 + this.OriginalId.GetHashCode();
                    if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                    if (this.Ean != null)
                    hash = hash * 59 + this.Ean.GetHashCode();
                    if (this.Images != null)
                    hash = hash * 59 + this.Images.GetHashCode();
                    if (this.Features != null)
                    hash = hash * 59 + this.Features.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(ProductSKUDetail left, ProductSKUDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductSKUDetail left, ProductSKUDetail right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
