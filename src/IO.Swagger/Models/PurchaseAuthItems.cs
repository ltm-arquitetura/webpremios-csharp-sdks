/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PurchaseAuthItems :  IEquatable<PurchaseAuthItems>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseAuthItems" /> class.
        /// </summary>
        /// <param name="ProductId">Identificador do produto.</param>
        /// <param name="VendorSkuId">Identificador do SKU no parceiro.</param>
        /// <param name="SkuId">Identificador do SKU.</param>
        /// <param name="Name">Nome do produto.</param>
        /// <param name="Quantity">Quantidade.</param>
        /// <param name="Category">Category.</param>
        /// <param name="ImageUrl">URL da imagem do produto.</param>
        /// <param name="Price">Price.</param>
        /// <param name="Vendor">Vendor.</param>
        public PurchaseAuthItems(string ProductId = default(string), string VendorSkuId = default(string), string SkuId = default(string), string Name = default(string), string Quantity = default(string), Category Category = default(Category), string ImageUrl = default(string), Price Price = default(Price), PurchaseAuthVendor Vendor = default(PurchaseAuthVendor))
        {
            this.ProductId = ProductId;
            this.VendorSkuId = VendorSkuId;
            this.SkuId = SkuId;
            this.Name = Name;
            this.Quantity = Quantity;
            this.Category = Category;
            this.ImageUrl = ImageUrl;
            this.Price = Price;
            this.Vendor = Vendor;
            
        }

        /// <summary>
        /// Identificador do produto
        /// </summary>
        /// <value>Identificador do produto</value>
        [DataMember(Name="productId")]
        public string ProductId { get; set; }
        /// <summary>
        /// Identificador do SKU no parceiro
        /// </summary>
        /// <value>Identificador do SKU no parceiro</value>
        [DataMember(Name="vendorSkuId")]
        public string VendorSkuId { get; set; }
        /// <summary>
        /// Identificador do SKU
        /// </summary>
        /// <value>Identificador do SKU</value>
        [DataMember(Name="skuId")]
        public string SkuId { get; set; }
        /// <summary>
        /// Nome do produto
        /// </summary>
        /// <value>Nome do produto</value>
        [DataMember(Name="name")]
        public string Name { get; set; }
        /// <summary>
        /// Quantidade
        /// </summary>
        /// <value>Quantidade</value>
        [DataMember(Name="quantity")]
        public string Quantity { get; set; }
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category")]
        public Category Category { get; set; }
        /// <summary>
        /// URL da imagem do produto
        /// </summary>
        /// <value>URL da imagem do produto</value>
        [DataMember(Name="imageUrl")]
        public string ImageUrl { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price")]
        public Price Price { get; set; }
        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name="vendor")]
        public PurchaseAuthVendor Vendor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseAuthItems {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  VendorSkuId: ").Append(VendorSkuId).Append("\n");
            sb.Append("  SkuId: ").Append(SkuId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((PurchaseAuthItems)obj);
        }

        /// <summary>
        /// Returns true if PurchaseAuthItems instances are equal
        /// </summary>
        /// <param name="other">Instance of PurchaseAuthItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseAuthItems other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ProductId == other.ProductId ||
                    this.ProductId != null &&
                    this.ProductId.Equals(other.ProductId)
                ) && 
                (
                    this.VendorSkuId == other.VendorSkuId ||
                    this.VendorSkuId != null &&
                    this.VendorSkuId.Equals(other.VendorSkuId)
                ) && 
                (
                    this.SkuId == other.SkuId ||
                    this.SkuId != null &&
                    this.SkuId.Equals(other.SkuId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.ImageUrl == other.ImageUrl ||
                    this.ImageUrl != null &&
                    this.ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.Vendor == other.Vendor ||
                    this.Vendor != null &&
                    this.Vendor.Equals(other.Vendor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ProductId != null)
                    hash = hash * 59 + this.ProductId.GetHashCode();
                    if (this.VendorSkuId != null)
                    hash = hash * 59 + this.VendorSkuId.GetHashCode();
                    if (this.SkuId != null)
                    hash = hash * 59 + this.SkuId.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                    if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                    if (this.ImageUrl != null)
                    hash = hash * 59 + this.ImageUrl.GetHashCode();
                    if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                    if (this.Vendor != null)
                    hash = hash * 59 + this.Vendor.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(PurchaseAuthItems left, PurchaseAuthItems right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PurchaseAuthItems left, PurchaseAuthItems right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
