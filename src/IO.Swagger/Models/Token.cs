/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Token :  IEquatable<Token>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Token" /> class.
        /// </summary>
        /// <param name="AccessToken">Token de acesso. (required).</param>
        /// <param name="RefreshToken">Token para renovação. (required).</param>
        /// <param name="TokenType">Tipo do token. (required).</param>
        /// <param name="ExpiresIn">Valor em segundos do vencimento do token. (required).</param>
        public Token(string AccessToken = default(string), string RefreshToken = default(string), string TokenType = default(string), long? ExpiresIn = default(long?))
        {
            // to ensure "AccessToken" is required (not null)
            if (AccessToken == null)
            {
                throw new InvalidDataException("AccessToken is a required property for Token and cannot be null");
            }
            else
            {
                this.AccessToken = AccessToken;
            }
            // to ensure "RefreshToken" is required (not null)
            if (RefreshToken == null)
            {
                throw new InvalidDataException("RefreshToken is a required property for Token and cannot be null");
            }
            else
            {
                this.RefreshToken = RefreshToken;
            }
            // to ensure "TokenType" is required (not null)
            if (TokenType == null)
            {
                throw new InvalidDataException("TokenType is a required property for Token and cannot be null");
            }
            else
            {
                this.TokenType = TokenType;
            }
            // to ensure "ExpiresIn" is required (not null)
            if (ExpiresIn == null)
            {
                throw new InvalidDataException("ExpiresIn is a required property for Token and cannot be null");
            }
            else
            {
                this.ExpiresIn = ExpiresIn;
            }
            
        }

        /// <summary>
        /// Token de acesso.
        /// </summary>
        /// <value>Token de acesso.</value>
        [DataMember(Name="access_token")]
        public string AccessToken { get; set; }
        /// <summary>
        /// Token para renovação.
        /// </summary>
        /// <value>Token para renovação.</value>
        [DataMember(Name="refresh_token")]
        public string RefreshToken { get; set; }
        /// <summary>
        /// Tipo do token.
        /// </summary>
        /// <value>Tipo do token.</value>
        [DataMember(Name="token_type")]
        public string TokenType { get; set; }
        /// <summary>
        /// Valor em segundos do vencimento do token.
        /// </summary>
        /// <value>Valor em segundos do vencimento do token.</value>
        [DataMember(Name="expires_in")]
        public long? ExpiresIn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Token {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Token)obj);
        }

        /// <summary>
        /// Returns true if Token instances are equal
        /// </summary>
        /// <param name="other">Instance of Token to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Token other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.AccessToken == other.AccessToken ||
                    this.AccessToken != null &&
                    this.AccessToken.Equals(other.AccessToken)
                ) && 
                (
                    this.RefreshToken == other.RefreshToken ||
                    this.RefreshToken != null &&
                    this.RefreshToken.Equals(other.RefreshToken)
                ) && 
                (
                    this.TokenType == other.TokenType ||
                    this.TokenType != null &&
                    this.TokenType.Equals(other.TokenType)
                ) && 
                (
                    this.ExpiresIn == other.ExpiresIn ||
                    this.ExpiresIn != null &&
                    this.ExpiresIn.Equals(other.ExpiresIn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.AccessToken != null)
                    hash = hash * 59 + this.AccessToken.GetHashCode();
                    if (this.RefreshToken != null)
                    hash = hash * 59 + this.RefreshToken.GetHashCode();
                    if (this.TokenType != null)
                    hash = hash * 59 + this.TokenType.GetHashCode();
                    if (this.ExpiresIn != null)
                    hash = hash * 59 + this.ExpiresIn.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Token left, Token right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Token left, Token right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
