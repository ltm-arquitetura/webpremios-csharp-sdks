/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PurchasePayment :  IEquatable<PurchasePayment>
    {
                /// <summary>
        /// Tipo do pagamento
        /// </summary>
        /// <value>Tipo do pagamento</value>
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum POINTSEnum for "POINTS"
            /// </summary>
            [EnumMember(Value = "POINTS")]
            POINTSEnum
        }
        /// <summary>
        /// Tipo do pagamento
        /// </summary>
        /// <value>Tipo do pagamento</value>
        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PurchasePayment" /> class.
        /// </summary>
        /// <param name="TransactionId">Identificador da transação.</param>
        /// <param name="Date">Data do pagamento.</param>
        /// <param name="ValuePoints">Valor do pagamentos, em pontos.</param>
        /// <param name="Type">Tipo do pagamento.</param>
        /// <param name="Brand">Brand.</param>
        /// <param name="Installments">Número de parcelas.</param>
        /// <param name="InstallmentsValue">Valor por parcela, em pontos.</param>
        public PurchasePayment(string TransactionId = default(string), string Date = default(string), decimal? ValuePoints = default(decimal?), TypeEnum? Type = default(TypeEnum?), PaymentBrand Brand = default(PaymentBrand), decimal? Installments = default(decimal?), decimal? InstallmentsValue = default(decimal?))
        {
            this.TransactionId = TransactionId;
            this.Date = Date;
            this.ValuePoints = ValuePoints;
            this.Type = Type;
            this.Brand = Brand;
            this.Installments = Installments;
            this.InstallmentsValue = InstallmentsValue;
            
        }

        /// <summary>
        /// Identificador da transação
        /// </summary>
        /// <value>Identificador da transação</value>
        [DataMember(Name="transactionId")]
        public string TransactionId { get; set; }
        /// <summary>
        /// Data do pagamento
        /// </summary>
        /// <value>Data do pagamento</value>
        [DataMember(Name="date")]
        public string Date { get; set; }
        /// <summary>
        /// Valor do pagamentos, em pontos
        /// </summary>
        /// <value>Valor do pagamentos, em pontos</value>
        [DataMember(Name="valuePoints")]
        public decimal? ValuePoints { get; set; }
        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name="brand")]
        public PaymentBrand Brand { get; set; }
        /// <summary>
        /// Número de parcelas
        /// </summary>
        /// <value>Número de parcelas</value>
        [DataMember(Name="installments")]
        public decimal? Installments { get; set; }
        /// <summary>
        /// Valor por parcela, em pontos
        /// </summary>
        /// <value>Valor por parcela, em pontos</value>
        [DataMember(Name="installmentsValue")]
        public decimal? InstallmentsValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchasePayment {\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  ValuePoints: ").Append(ValuePoints).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Installments: ").Append(Installments).Append("\n");
            sb.Append("  InstallmentsValue: ").Append(InstallmentsValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((PurchasePayment)obj);
        }

        /// <summary>
        /// Returns true if PurchasePayment instances are equal
        /// </summary>
        /// <param name="other">Instance of PurchasePayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchasePayment other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.TransactionId == other.TransactionId ||
                    this.TransactionId != null &&
                    this.TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.ValuePoints == other.ValuePoints ||
                    this.ValuePoints != null &&
                    this.ValuePoints.Equals(other.ValuePoints)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Brand == other.Brand ||
                    this.Brand != null &&
                    this.Brand.Equals(other.Brand)
                ) && 
                (
                    this.Installments == other.Installments ||
                    this.Installments != null &&
                    this.Installments.Equals(other.Installments)
                ) && 
                (
                    this.InstallmentsValue == other.InstallmentsValue ||
                    this.InstallmentsValue != null &&
                    this.InstallmentsValue.Equals(other.InstallmentsValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.TransactionId != null)
                    hash = hash * 59 + this.TransactionId.GetHashCode();
                    if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                    if (this.ValuePoints != null)
                    hash = hash * 59 + this.ValuePoints.GetHashCode();
                    if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                    if (this.Brand != null)
                    hash = hash * 59 + this.Brand.GetHashCode();
                    if (this.Installments != null)
                    hash = hash * 59 + this.Installments.GetHashCode();
                    if (this.InstallmentsValue != null)
                    hash = hash * 59 + this.InstallmentsValue.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(PurchasePayment left, PurchasePayment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PurchasePayment left, PurchasePayment right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
