/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Purchase :  IEquatable<Purchase>
    {
                /// <summary>
        /// Canal que o pedido foi realizado
        /// </summary>
        /// <value>Canal que o pedido foi realizado</value>
        public enum ChannelTypeEnum
        {
            
            /// <summary>
            /// Enum ONLINEEnum for "ONLINE"
            /// </summary>
            [EnumMember(Value = "ONLINE")]
            ONLINEEnum,
            
            /// <summary>
            /// Enum POSEnum for "POS"
            /// </summary>
            [EnumMember(Value = "POS")]
            POSEnum,
            
            /// <summary>
            /// Enum CALLCENTEREnum for "CALLCENTER"
            /// </summary>
            [EnumMember(Value = "CALLCENTER")]
            CALLCENTEREnum,
            
            /// <summary>
            /// Enum STOREAUTHORIZEEnum for "STOREAUTHORIZE"
            /// </summary>
            [EnumMember(Value = "STOREAUTHORIZE")]
            STOREAUTHORIZEEnum,
            
            /// <summary>
            /// Enum STOREONLINEEnum for "STOREONLINE"
            /// </summary>
            [EnumMember(Value = "STOREONLINE")]
            STOREONLINEEnum,
            
            /// <summary>
            /// Enum MOBILEEnum for "MOBILE"
            /// </summary>
            [EnumMember(Value = "MOBILE")]
            MOBILEEnum,
            
            /// <summary>
            /// Enum STOREOWNEnum for "STOREOWN"
            /// </summary>
            [EnumMember(Value = "STOREOWN")]
            STOREOWNEnum,
            
            /// <summary>
            /// Enum RESALEEnum for "RESALE"
            /// </summary>
            [EnumMember(Value = "RESALE")]
            RESALEEnum,
            
            /// <summary>
            /// Enum SELFSERVICEEnum for "SELFSERVICE"
            /// </summary>
            [EnumMember(Value = "SELFSERVICE")]
            SELFSERVICEEnum,
            
            /// <summary>
            /// Enum SMSINTERACTIVEEnum for "SMSINTERACTIVE"
            /// </summary>
            [EnumMember(Value = "SMSINTERACTIVE")]
            SMSINTERACTIVEEnum,
            
            /// <summary>
            /// Enum TELESALESEnum for "TELESALES"
            /// </summary>
            [EnumMember(Value = "TELESALES")]
            TELESALESEnum,
            
            /// <summary>
            /// Enum URAEnum for "URA"
            /// </summary>
            [EnumMember(Value = "URA")]
            URAEnum,
            
            /// <summary>
            /// Enum STOREBENEFITEnum for "STOREBENEFIT"
            /// </summary>
            [EnumMember(Value = "STOREBENEFIT")]
            STOREBENEFITEnum,
            
            /// <summary>
            /// Enum NETBANKINGEnum for "NETBANKING"
            /// </summary>
            [EnumMember(Value = "NETBANKING")]
            NETBANKINGEnum,
            
            /// <summary>
            /// Enum OFFLINEEnum for "OFFLINE"
            /// </summary>
            [EnumMember(Value = "OFFLINE")]
            OFFLINEEnum
        }
        /// <summary>
        /// Canal que o pedido foi realizado
        /// </summary>
        /// <value>Canal que o pedido foi realizado</value>
        [DataMember(Name="channelType")]
        public ChannelTypeEnum? ChannelType { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Purchase" /> class.
        /// </summary>
        /// <param name="Id">Identificador da compra.</param>
        /// <param name="Date">Data da compra.</param>
        /// <param name="ValuePoints">Valor total da compra, em pontos.</param>
        /// <param name="ShippingValuePoints">Valor total do frete da compra, em pontos.</param>
        /// <param name="ChannelType">Canal que o pedido foi realizado.</param>
        /// <param name="Orders">Orders.</param>
        /// <param name="Payments">Payments.</param>
        /// <param name="Customer">Customer.</param>
        /// <param name="Campaign">Campaign.</param>
        /// <param name="Catalog">Catalog.</param>
        public Purchase(string Id = default(string), string Date = default(string), decimal? ValuePoints = default(decimal?), decimal? ShippingValuePoints = default(decimal?), ChannelTypeEnum? ChannelType = default(ChannelTypeEnum?), List<Orders> Orders = default(List<Orders>), List<PurchasePayment> Payments = default(List<PurchasePayment>), PurchaseCustomer Customer = default(PurchaseCustomer), Campaign Campaign = default(Campaign), Catalog Catalog = default(Catalog))
        {
            this.Id = Id;
            this.Date = Date;
            this.ValuePoints = ValuePoints;
            this.ShippingValuePoints = ShippingValuePoints;
            this.ChannelType = ChannelType;
            this.Orders = Orders;
            this.Payments = Payments;
            this.Customer = Customer;
            this.Campaign = Campaign;
            this.Catalog = Catalog;
            
        }

        /// <summary>
        /// Identificador da compra
        /// </summary>
        /// <value>Identificador da compra</value>
        [DataMember(Name="id")]
        public string Id { get; set; }
        /// <summary>
        /// Data da compra
        /// </summary>
        /// <value>Data da compra</value>
        [DataMember(Name="date")]
        public string Date { get; set; }
        /// <summary>
        /// Valor total da compra, em pontos
        /// </summary>
        /// <value>Valor total da compra, em pontos</value>
        [DataMember(Name="valuePoints")]
        public decimal? ValuePoints { get; set; }
        /// <summary>
        /// Valor total do frete da compra, em pontos
        /// </summary>
        /// <value>Valor total do frete da compra, em pontos</value>
        [DataMember(Name="shippingValuePoints")]
        public decimal? ShippingValuePoints { get; set; }
        /// <summary>
        /// Gets or Sets Orders
        /// </summary>
        [DataMember(Name="orders")]
        public List<Orders> Orders { get; set; }
        /// <summary>
        /// Gets or Sets Payments
        /// </summary>
        [DataMember(Name="payments")]
        public List<PurchasePayment> Payments { get; set; }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer")]
        public PurchaseCustomer Customer { get; set; }
        /// <summary>
        /// Gets or Sets Campaign
        /// </summary>
        [DataMember(Name="campaign")]
        public Campaign Campaign { get; set; }
        /// <summary>
        /// Gets or Sets Catalog
        /// </summary>
        [DataMember(Name="catalog")]
        public Catalog Catalog { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Purchase {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  ValuePoints: ").Append(ValuePoints).Append("\n");
            sb.Append("  ShippingValuePoints: ").Append(ShippingValuePoints).Append("\n");
            sb.Append("  ChannelType: ").Append(ChannelType).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Campaign: ").Append(Campaign).Append("\n");
            sb.Append("  Catalog: ").Append(Catalog).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Purchase)obj);
        }

        /// <summary>
        /// Returns true if Purchase instances are equal
        /// </summary>
        /// <param name="other">Instance of Purchase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Purchase other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.ValuePoints == other.ValuePoints ||
                    this.ValuePoints != null &&
                    this.ValuePoints.Equals(other.ValuePoints)
                ) && 
                (
                    this.ShippingValuePoints == other.ShippingValuePoints ||
                    this.ShippingValuePoints != null &&
                    this.ShippingValuePoints.Equals(other.ShippingValuePoints)
                ) && 
                (
                    this.ChannelType == other.ChannelType ||
                    this.ChannelType != null &&
                    this.ChannelType.Equals(other.ChannelType)
                ) && 
                (
                    this.Orders == other.Orders ||
                    this.Orders != null &&
                    this.Orders.SequenceEqual(other.Orders)
                ) && 
                (
                    this.Payments == other.Payments ||
                    this.Payments != null &&
                    this.Payments.SequenceEqual(other.Payments)
                ) && 
                (
                    this.Customer == other.Customer ||
                    this.Customer != null &&
                    this.Customer.Equals(other.Customer)
                ) && 
                (
                    this.Campaign == other.Campaign ||
                    this.Campaign != null &&
                    this.Campaign.Equals(other.Campaign)
                ) && 
                (
                    this.Catalog == other.Catalog ||
                    this.Catalog != null &&
                    this.Catalog.Equals(other.Catalog)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                    if (this.ValuePoints != null)
                    hash = hash * 59 + this.ValuePoints.GetHashCode();
                    if (this.ShippingValuePoints != null)
                    hash = hash * 59 + this.ShippingValuePoints.GetHashCode();
                    if (this.ChannelType != null)
                    hash = hash * 59 + this.ChannelType.GetHashCode();
                    if (this.Orders != null)
                    hash = hash * 59 + this.Orders.GetHashCode();
                    if (this.Payments != null)
                    hash = hash * 59 + this.Payments.GetHashCode();
                    if (this.Customer != null)
                    hash = hash * 59 + this.Customer.GetHashCode();
                    if (this.Campaign != null)
                    hash = hash * 59 + this.Campaign.GetHashCode();
                    if (this.Catalog != null)
                    hash = hash * 59 + this.Catalog.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Purchase left, Purchase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Purchase left, Purchase right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
