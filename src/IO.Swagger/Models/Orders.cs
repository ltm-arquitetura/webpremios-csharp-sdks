/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Orders :  IEquatable<Orders>
    {
                /// <summary>
        /// Status do pedido
        /// </summary>
        /// <value>Status do pedido</value>
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum APPROVEDEnum for "APPROVED"
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVEDEnum,
            
            /// <summary>
            /// Enum LOCKEDEnum for "LOCKED"
            /// </summary>
            [EnumMember(Value = "LOCKED")]
            LOCKEDEnum,
            
            /// <summary>
            /// Enum CANCELEDEnum for "CANCELED"
            /// </summary>
            [EnumMember(Value = "CANCELED")]
            CANCELEDEnum,
            
            /// <summary>
            /// Enum PENDINGEnum for "PENDING"
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDINGEnum,
            
            /// <summary>
            /// Enum DELIVEREDEnum for "DELIVERED"
            /// </summary>
            [EnumMember(Value = "DELIVERED")]
            DELIVEREDEnum,
            
            /// <summary>
            /// Enum SENTEnum for "SENT"
            /// </summary>
            [EnumMember(Value = "SENT")]
            SENTEnum,
            
            /// <summary>
            /// Enum PARTIALCANCELEDEnum for "PARTIALCANCELED"
            /// </summary>
            [EnumMember(Value = "PARTIALCANCELED")]
            PARTIALCANCELEDEnum,
            
            /// <summary>
            /// Enum UNCONFIRMEDPAYMENTEnum for "UNCONFIRMEDPAYMENT"
            /// </summary>
            [EnumMember(Value = "UNCONFIRMEDPAYMENT")]
            UNCONFIRMEDPAYMENTEnum,
            
            /// <summary>
            /// Enum AUTHENTICATIONREQUIREDEnum for "AUTHENTICATIONREQUIRED"
            /// </summary>
            [EnumMember(Value = "AUTHENTICATIONREQUIRED")]
            AUTHENTICATIONREQUIREDEnum,
            
            /// <summary>
            /// Enum AUTHENTICATIONDENIEDEnum for "AUTHENTICATIONDENIED"
            /// </summary>
            [EnumMember(Value = "AUTHENTICATIONDENIED")]
            AUTHENTICATIONDENIEDEnum,
            
            /// <summary>
            /// Enum DENIEDSUPPLIEREnum for "DENIEDSUPPLIER"
            /// </summary>
            [EnumMember(Value = "DENIEDSUPPLIER")]
            DENIEDSUPPLIEREnum,
            
            /// <summary>
            /// Enum CONFIRMEDEnum for "CONFIRMED"
            /// </summary>
            [EnumMember(Value = "CONFIRMED")]
            CONFIRMEDEnum,
            
            /// <summary>
            /// Enum NOTCOMPLETEDEnum for "NOTCOMPLETED"
            /// </summary>
            [EnumMember(Value = "NOTCOMPLETED")]
            NOTCOMPLETEDEnum,
            
            /// <summary>
            /// Enum PAYMENTREVERSEDEnum for "PAYMENTREVERSED"
            /// </summary>
            [EnumMember(Value = "PAYMENTREVERSED")]
            PAYMENTREVERSEDEnum,
            
            /// <summary>
            /// Enum DENIEDLTMANTIFRAUDEnum for "DENIEDLTMANTIFRAUD"
            /// </summary>
            [EnumMember(Value = "DENIEDLTMANTIFRAUD")]
            DENIEDLTMANTIFRAUDEnum,
            
            /// <summary>
            /// Enum CANCELEnum for "CANCEL"
            /// </summary>
            [EnumMember(Value = "CANCEL")]
            CANCELEnum
        }
        /// <summary>
        /// Status do pedido
        /// </summary>
        /// <value>Status do pedido</value>
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Orders" /> class.
        /// </summary>
        /// <param name="Id">Identificador do pedido.</param>
        /// <param name="VendorOrderId">Identificador do pedido no vendor.</param>
        /// <param name="Status">Status do pedido.</param>
        /// <param name="ValuePoints">Valor total do pedido, em pontos.</param>
        /// <param name="ProductsValuePoints">Valor total dos produtos, em pontos.</param>
        /// <param name="ShippingValuePoints">Valor total do frete do pedido, em pontos.</param>
        /// <param name="Items">Items.</param>
        /// <param name="Vendor">Vendor.</param>
        public Orders(string Id = default(string), string VendorOrderId = default(string), StatusEnum? Status = default(StatusEnum?), decimal? ValuePoints = default(decimal?), decimal? ProductsValuePoints = default(decimal?), decimal? ShippingValuePoints = default(decimal?), List<Items> Items = default(List<Items>), List<VendorOrders> Vendor = default(List<VendorOrders>))
        {
            this.Id = Id;
            this.VendorOrderId = VendorOrderId;
            this.Status = Status;
            this.ValuePoints = ValuePoints;
            this.ProductsValuePoints = ProductsValuePoints;
            this.ShippingValuePoints = ShippingValuePoints;
            this.Items = Items;
            this.Vendor = Vendor;
            
        }

        /// <summary>
        /// Identificador do pedido
        /// </summary>
        /// <value>Identificador do pedido</value>
        [DataMember(Name="id")]
        public string Id { get; set; }
        /// <summary>
        /// Identificador do pedido no vendor
        /// </summary>
        /// <value>Identificador do pedido no vendor</value>
        [DataMember(Name="vendorOrderId")]
        public string VendorOrderId { get; set; }
        /// <summary>
        /// Valor total do pedido, em pontos
        /// </summary>
        /// <value>Valor total do pedido, em pontos</value>
        [DataMember(Name="valuePoints")]
        public decimal? ValuePoints { get; set; }
        /// <summary>
        /// Valor total dos produtos, em pontos
        /// </summary>
        /// <value>Valor total dos produtos, em pontos</value>
        [DataMember(Name="productsValuePoints")]
        public decimal? ProductsValuePoints { get; set; }
        /// <summary>
        /// Valor total do frete do pedido, em pontos
        /// </summary>
        /// <value>Valor total do frete do pedido, em pontos</value>
        [DataMember(Name="shippingValuePoints")]
        public decimal? ShippingValuePoints { get; set; }
        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items")]
        public List<Items> Items { get; set; }
        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name="vendor")]
        public List<VendorOrders> Vendor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Orders {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VendorOrderId: ").Append(VendorOrderId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ValuePoints: ").Append(ValuePoints).Append("\n");
            sb.Append("  ProductsValuePoints: ").Append(ProductsValuePoints).Append("\n");
            sb.Append("  ShippingValuePoints: ").Append(ShippingValuePoints).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Orders)obj);
        }

        /// <summary>
        /// Returns true if Orders instances are equal
        /// </summary>
        /// <param name="other">Instance of Orders to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Orders other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.VendorOrderId == other.VendorOrderId ||
                    this.VendorOrderId != null &&
                    this.VendorOrderId.Equals(other.VendorOrderId)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.ValuePoints == other.ValuePoints ||
                    this.ValuePoints != null &&
                    this.ValuePoints.Equals(other.ValuePoints)
                ) && 
                (
                    this.ProductsValuePoints == other.ProductsValuePoints ||
                    this.ProductsValuePoints != null &&
                    this.ProductsValuePoints.Equals(other.ProductsValuePoints)
                ) && 
                (
                    this.ShippingValuePoints == other.ShippingValuePoints ||
                    this.ShippingValuePoints != null &&
                    this.ShippingValuePoints.Equals(other.ShippingValuePoints)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(other.Items)
                ) && 
                (
                    this.Vendor == other.Vendor ||
                    this.Vendor != null &&
                    this.Vendor.SequenceEqual(other.Vendor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.VendorOrderId != null)
                    hash = hash * 59 + this.VendorOrderId.GetHashCode();
                    if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                    if (this.ValuePoints != null)
                    hash = hash * 59 + this.ValuePoints.GetHashCode();
                    if (this.ProductsValuePoints != null)
                    hash = hash * 59 + this.ProductsValuePoints.GetHashCode();
                    if (this.ShippingValuePoints != null)
                    hash = hash * 59 + this.ShippingValuePoints.GetHashCode();
                    if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                    if (this.Vendor != null)
                    hash = hash * 59 + this.Vendor.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Orders left, Orders right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Orders left, Orders right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
