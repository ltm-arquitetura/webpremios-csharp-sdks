/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Balance :  IEquatable<Balance>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Balance" /> class.
        /// </summary>
        /// <param name="PointsValue">Saldo de pontos.</param>
        /// <param name="PointsValueOnhold">Saldo de pontos bloqueados.</param>
        /// <param name="TotalPointsValue">Saldo de pontos + pontos bloqueados.</param>
        /// <param name="TotalCreditPointsValue">Total de créditos em pontos.</param>
        /// <param name="TotalDebitPointsValue">Total de débitos em pontos.</param>
        public Balance(decimal? PointsValue = default(decimal?), decimal? PointsValueOnhold = default(decimal?), decimal? TotalPointsValue = default(decimal?), decimal? TotalCreditPointsValue = default(decimal?), decimal? TotalDebitPointsValue = default(decimal?))
        {
            this.PointsValue = PointsValue;
            this.PointsValueOnhold = PointsValueOnhold;
            this.TotalPointsValue = TotalPointsValue;
            this.TotalCreditPointsValue = TotalCreditPointsValue;
            this.TotalDebitPointsValue = TotalDebitPointsValue;
            
        }

        /// <summary>
        /// Saldo de pontos
        /// </summary>
        /// <value>Saldo de pontos</value>
        [DataMember(Name="pointsValue")]
        public decimal? PointsValue { get; set; }
        /// <summary>
        /// Saldo de pontos bloqueados
        /// </summary>
        /// <value>Saldo de pontos bloqueados</value>
        [DataMember(Name="pointsValueOnhold")]
        public decimal? PointsValueOnhold { get; set; }
        /// <summary>
        /// Saldo de pontos + pontos bloqueados
        /// </summary>
        /// <value>Saldo de pontos + pontos bloqueados</value>
        [DataMember(Name="totalPointsValue")]
        public decimal? TotalPointsValue { get; set; }
        /// <summary>
        /// Total de créditos em pontos
        /// </summary>
        /// <value>Total de créditos em pontos</value>
        [DataMember(Name="totalCreditPointsValue")]
        public decimal? TotalCreditPointsValue { get; set; }
        /// <summary>
        /// Total de débitos em pontos
        /// </summary>
        /// <value>Total de débitos em pontos</value>
        [DataMember(Name="totalDebitPointsValue")]
        public decimal? TotalDebitPointsValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Balance {\n");
            sb.Append("  PointsValue: ").Append(PointsValue).Append("\n");
            sb.Append("  PointsValueOnhold: ").Append(PointsValueOnhold).Append("\n");
            sb.Append("  TotalPointsValue: ").Append(TotalPointsValue).Append("\n");
            sb.Append("  TotalCreditPointsValue: ").Append(TotalCreditPointsValue).Append("\n");
            sb.Append("  TotalDebitPointsValue: ").Append(TotalDebitPointsValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Balance)obj);
        }

        /// <summary>
        /// Returns true if Balance instances are equal
        /// </summary>
        /// <param name="other">Instance of Balance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Balance other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.PointsValue == other.PointsValue ||
                    this.PointsValue != null &&
                    this.PointsValue.Equals(other.PointsValue)
                ) && 
                (
                    this.PointsValueOnhold == other.PointsValueOnhold ||
                    this.PointsValueOnhold != null &&
                    this.PointsValueOnhold.Equals(other.PointsValueOnhold)
                ) && 
                (
                    this.TotalPointsValue == other.TotalPointsValue ||
                    this.TotalPointsValue != null &&
                    this.TotalPointsValue.Equals(other.TotalPointsValue)
                ) && 
                (
                    this.TotalCreditPointsValue == other.TotalCreditPointsValue ||
                    this.TotalCreditPointsValue != null &&
                    this.TotalCreditPointsValue.Equals(other.TotalCreditPointsValue)
                ) && 
                (
                    this.TotalDebitPointsValue == other.TotalDebitPointsValue ||
                    this.TotalDebitPointsValue != null &&
                    this.TotalDebitPointsValue.Equals(other.TotalDebitPointsValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.PointsValue != null)
                    hash = hash * 59 + this.PointsValue.GetHashCode();
                    if (this.PointsValueOnhold != null)
                    hash = hash * 59 + this.PointsValueOnhold.GetHashCode();
                    if (this.TotalPointsValue != null)
                    hash = hash * 59 + this.TotalPointsValue.GetHashCode();
                    if (this.TotalCreditPointsValue != null)
                    hash = hash * 59 + this.TotalCreditPointsValue.GetHashCode();
                    if (this.TotalDebitPointsValue != null)
                    hash = hash * 59 + this.TotalDebitPointsValue.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Balance left, Balance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Balance left, Balance right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
