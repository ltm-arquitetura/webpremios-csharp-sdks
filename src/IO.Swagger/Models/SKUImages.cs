/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SKUImages :  IEquatable<SKUImages>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="SKUImages" /> class.
        /// </summary>
        /// <param name="SmallImage">Imagem pequena.</param>
        /// <param name="MediumImage">Imagem média.</param>
        /// <param name="LargeImage">Imagem grande.</param>
        /// <param name="Order">Ordem de exibição.</param>
        public SKUImages(string SmallImage = default(string), string MediumImage = default(string), string LargeImage = default(string), decimal? Order = default(decimal?))
        {
            this.SmallImage = SmallImage;
            this.MediumImage = MediumImage;
            this.LargeImage = LargeImage;
            this.Order = Order;
            
        }

        /// <summary>
        /// Imagem pequena
        /// </summary>
        /// <value>Imagem pequena</value>
        [DataMember(Name="smallImage")]
        public string SmallImage { get; set; }
        /// <summary>
        /// Imagem média
        /// </summary>
        /// <value>Imagem média</value>
        [DataMember(Name="mediumImage")]
        public string MediumImage { get; set; }
        /// <summary>
        /// Imagem grande
        /// </summary>
        /// <value>Imagem grande</value>
        [DataMember(Name="largeImage")]
        public string LargeImage { get; set; }
        /// <summary>
        /// Ordem de exibição
        /// </summary>
        /// <value>Ordem de exibição</value>
        [DataMember(Name="order")]
        public decimal? Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SKUImages {\n");
            sb.Append("  SmallImage: ").Append(SmallImage).Append("\n");
            sb.Append("  MediumImage: ").Append(MediumImage).Append("\n");
            sb.Append("  LargeImage: ").Append(LargeImage).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((SKUImages)obj);
        }

        /// <summary>
        /// Returns true if SKUImages instances are equal
        /// </summary>
        /// <param name="other">Instance of SKUImages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SKUImages other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.SmallImage == other.SmallImage ||
                    this.SmallImage != null &&
                    this.SmallImage.Equals(other.SmallImage)
                ) && 
                (
                    this.MediumImage == other.MediumImage ||
                    this.MediumImage != null &&
                    this.MediumImage.Equals(other.MediumImage)
                ) && 
                (
                    this.LargeImage == other.LargeImage ||
                    this.LargeImage != null &&
                    this.LargeImage.Equals(other.LargeImage)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.SmallImage != null)
                    hash = hash * 59 + this.SmallImage.GetHashCode();
                    if (this.MediumImage != null)
                    hash = hash * 59 + this.MediumImage.GetHashCode();
                    if (this.LargeImage != null)
                    hash = hash * 59 + this.LargeImage.GetHashCode();
                    if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(SKUImages left, SKUImages right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SKUImages left, SKUImages right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
