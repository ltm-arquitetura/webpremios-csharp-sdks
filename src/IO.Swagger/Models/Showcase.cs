/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Showcase :  IEquatable<Showcase>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Showcase" /> class.
        /// </summary>
        /// <param name="LowerPrice">Menor preço de produto da vitrine.</param>
        /// <param name="HigherPrice">Maior preço de produto da vitrine.</param>
        /// <param name="Products">Products.</param>
        /// <param name="Vendors">Vendors.</param>
        /// <param name="Categories">Categories.</param>
        /// <param name="Brands">Brands.</param>
        public Showcase(decimal? LowerPrice = default(decimal?), decimal? HigherPrice = default(decimal?), List<Product> Products = default(List<Product>), List<Vendor> Vendors = default(List<Vendor>), List<FilterCategory> Categories = default(List<FilterCategory>), List<Brand> Brands = default(List<Brand>))
        {
            this.LowerPrice = LowerPrice;
            this.HigherPrice = HigherPrice;
            this.Products = Products;
            this.Vendors = Vendors;
            this.Categories = Categories;
            this.Brands = Brands;
            
        }

        /// <summary>
        /// Menor preço de produto da vitrine
        /// </summary>
        /// <value>Menor preço de produto da vitrine</value>
        [DataMember(Name="lowerPrice")]
        public decimal? LowerPrice { get; set; }
        /// <summary>
        /// Maior preço de produto da vitrine
        /// </summary>
        /// <value>Maior preço de produto da vitrine</value>
        [DataMember(Name="higherPrice")]
        public decimal? HigherPrice { get; set; }
        /// <summary>
        /// Gets or Sets Products
        /// </summary>
        [DataMember(Name="products")]
        public List<Product> Products { get; set; }
        /// <summary>
        /// Gets or Sets Vendors
        /// </summary>
        [DataMember(Name="vendors")]
        public List<Vendor> Vendors { get; set; }
        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories")]
        public List<FilterCategory> Categories { get; set; }
        /// <summary>
        /// Gets or Sets Brands
        /// </summary>
        [DataMember(Name="brands")]
        public List<Brand> Brands { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Showcase {\n");
            sb.Append("  LowerPrice: ").Append(LowerPrice).Append("\n");
            sb.Append("  HigherPrice: ").Append(HigherPrice).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  Vendors: ").Append(Vendors).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Brands: ").Append(Brands).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Showcase)obj);
        }

        /// <summary>
        /// Returns true if Showcase instances are equal
        /// </summary>
        /// <param name="other">Instance of Showcase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Showcase other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.LowerPrice == other.LowerPrice ||
                    this.LowerPrice != null &&
                    this.LowerPrice.Equals(other.LowerPrice)
                ) && 
                (
                    this.HigherPrice == other.HigherPrice ||
                    this.HigherPrice != null &&
                    this.HigherPrice.Equals(other.HigherPrice)
                ) && 
                (
                    this.Products == other.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(other.Products)
                ) && 
                (
                    this.Vendors == other.Vendors ||
                    this.Vendors != null &&
                    this.Vendors.SequenceEqual(other.Vendors)
                ) && 
                (
                    this.Categories == other.Categories ||
                    this.Categories != null &&
                    this.Categories.SequenceEqual(other.Categories)
                ) && 
                (
                    this.Brands == other.Brands ||
                    this.Brands != null &&
                    this.Brands.SequenceEqual(other.Brands)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.LowerPrice != null)
                    hash = hash * 59 + this.LowerPrice.GetHashCode();
                    if (this.HigherPrice != null)
                    hash = hash * 59 + this.HigherPrice.GetHashCode();
                    if (this.Products != null)
                    hash = hash * 59 + this.Products.GetHashCode();
                    if (this.Vendors != null)
                    hash = hash * 59 + this.Vendors.GetHashCode();
                    if (this.Categories != null)
                    hash = hash * 59 + this.Categories.GetHashCode();
                    if (this.Brands != null)
                    hash = hash * 59 + this.Brands.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Showcase left, Showcase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Showcase left, Showcase right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
