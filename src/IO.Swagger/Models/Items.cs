/*
 * Marketplace
 *
 * API Cloud Loyalty LTM - Webpremios
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Items :  IEquatable<Items>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Items" /> class.
        /// </summary>
        /// <param name="Id">Identificador do item.</param>
        /// <param name="ProductId">Identificador do produto.</param>
        /// <param name="Name">Nome do produto.</param>
        /// <param name="ImageUrl">Url da foto do produto.</param>
        /// <param name="ValuePoints">Valor do produto, em pontos.</param>
        /// <param name="Quantity">Quantidade.</param>
        /// <param name="ShippingEstimate">Data estimada de entrega.</param>
        public Items(string Id = default(string), string ProductId = default(string), string Name = default(string), string ImageUrl = default(string), string ValuePoints = default(string), string Quantity = default(string), string ShippingEstimate = default(string))
        {
            this.Id = Id;
            this.ProductId = ProductId;
            this.Name = Name;
            this.ImageUrl = ImageUrl;
            this.ValuePoints = ValuePoints;
            this.Quantity = Quantity;
            this.ShippingEstimate = ShippingEstimate;
            
        }

        /// <summary>
        /// Identificador do item
        /// </summary>
        /// <value>Identificador do item</value>
        [DataMember(Name="id")]
        public string Id { get; set; }
        /// <summary>
        /// Identificador do produto
        /// </summary>
        /// <value>Identificador do produto</value>
        [DataMember(Name="productId")]
        public string ProductId { get; set; }
        /// <summary>
        /// Nome do produto
        /// </summary>
        /// <value>Nome do produto</value>
        [DataMember(Name="name")]
        public string Name { get; set; }
        /// <summary>
        /// Url da foto do produto
        /// </summary>
        /// <value>Url da foto do produto</value>
        [DataMember(Name="imageUrl")]
        public string ImageUrl { get; set; }
        /// <summary>
        /// Valor do produto, em pontos
        /// </summary>
        /// <value>Valor do produto, em pontos</value>
        [DataMember(Name="valuePoints")]
        public string ValuePoints { get; set; }
        /// <summary>
        /// Quantidade
        /// </summary>
        /// <value>Quantidade</value>
        [DataMember(Name="quantity")]
        public string Quantity { get; set; }
        /// <summary>
        /// Data estimada de entrega
        /// </summary>
        /// <value>Data estimada de entrega</value>
        [DataMember(Name="shippingEstimate")]
        public string ShippingEstimate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Items {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  ValuePoints: ").Append(ValuePoints).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ShippingEstimate: ").Append(ShippingEstimate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Items)obj);
        }

        /// <summary>
        /// Returns true if Items instances are equal
        /// </summary>
        /// <param name="other">Instance of Items to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Items other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ProductId == other.ProductId ||
                    this.ProductId != null &&
                    this.ProductId.Equals(other.ProductId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ImageUrl == other.ImageUrl ||
                    this.ImageUrl != null &&
                    this.ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    this.ValuePoints == other.ValuePoints ||
                    this.ValuePoints != null &&
                    this.ValuePoints.Equals(other.ValuePoints)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.ShippingEstimate == other.ShippingEstimate ||
                    this.ShippingEstimate != null &&
                    this.ShippingEstimate.Equals(other.ShippingEstimate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.ProductId != null)
                    hash = hash * 59 + this.ProductId.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.ImageUrl != null)
                    hash = hash * 59 + this.ImageUrl.GetHashCode();
                    if (this.ValuePoints != null)
                    hash = hash * 59 + this.ValuePoints.GetHashCode();
                    if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                    if (this.ShippingEstimate != null)
                    hash = hash * 59 + this.ShippingEstimate.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Items left, Items right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Items left, Items right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
